类型,包名,类名/接口名,属性,方法,描述,设计模式,关系类型,关联对象
接口,核心接口,ILlmService,,"getChatClient(): ChatClient, getPlanningChatClient(): ChatClient, getChatModel(): ChatModel",LLM服务核心接口,,实现,LlmService
接口,核心接口,ToolCallBiFunctionDef<I>,,"getName(): String, getDescription(): String, getParameters(): String, getInputType(): Class<I>, isReturnDirect(): boolean, setCurrentPlanId(planId: String): void, setRootPlanId(rootPlanId: String): void, getCurrentToolStateString(): String, cleanup(planId: String): void, apply(input: I, context: ToolContext): ToolExecuteResult",工具调用统一接口,策略模式,实现,AbstractBaseTool
接口,核心接口,PlanningToolInterface,,"getCurrentPlanId(): String, getCurrentPlan(): PlanInterface, getFunctionToolCallback(): FunctionToolCallback",规划工具接口,,实现,"PlanningTool, MapReducePlanningTool"
接口,核心接口,TerminableTool,,canTerminate(): boolean,可终止工具接口,,实现,TerminateTool
接口,核心接口,PlanExecutorInterface,,executeAllSteps(context: ExecutionContext): void,计划执行器接口,策略模式,实现,AbstractPlanExecutor
接口,核心接口,IUnifiedDirectoryManager,,"getWorkingDirectoryPath(): String, getWorkingDirectory(): Path, createTaskDirectory(taskId: String): Path, createPlanDirectory(planId: String): Path",统一目录管理接口,,实现,UnifiedDirectoryManager
接口,配置管理,IManusProperties,,"getBrowserHeadless(): Boolean, getBrowserRequestTimeout(): Integer, getDebugDetail(): Boolean, getMaxSteps(): Integer",配置属性接口,,实现,ManusProperties
类,配置管理,ManusProperties,"browserHeadless: Boolean, browserRequestTimeout: Integer, debugDetail: Boolean, maxSteps: Integer","getBrowserHeadless(): Boolean, setBrowserHeadless(value: Boolean): void",配置属性实现类,,实现,IManusProperties
抽象类,工具体系,AbstractBaseTool<I>,"currentPlanId: String, rootPlanId: String","isReturnDirect(): boolean, setCurrentPlanId(planId: String): void, setRootPlanId(rootPlanId: String): void, apply(input: I, context: ToolContext): ToolExecuteResult, run(input: I): ToolExecuteResult",工具抽象基类,模板方法模式,继承,ToolCallBiFunctionDef
类,工具体系,PlanningTool,"currentPlan: ExecutionPlan, objectMapper: ObjectMapper","run(input: PlanningInput): ToolExecuteResult, getCurrentPlanId(): String, getCurrentPlan(): PlanInterface, getFunctionToolCallback(): FunctionToolCallback",规划工具实现,,继承,AbstractBaseTool
类,工具体系,FormInputTool,userInputService: IUserInputService,run(input: UserFormInput): ToolExecuteResult,表单输入工具,,继承,AbstractBaseTool
类,工具体系,TerminateTool,,run(input: Map<String, Object>): ToolExecuteResult canTerminate(): boolean,终止工具,,继承,AbstractBaseTool
类,工具体系,DocLoaderTool,,run(input: DocLoaderInput): ToolExecuteResult,文档加载工具,,继承,AbstractBaseTool
类,工具体系,MapReducePlanningTool,currentPlan: MapReduceExecutionPlan,"apply(input: String): ToolExecuteResult, getCurrentPlanId(): String",MapReduce规划工具,,继承,AbstractBaseTool
类,工具体系,UnifiedDirectoryManager,manusProperties: ManusProperties,"getWorkingDirectoryPath(): String, getWorkingDirectory(): Path, createTaskDirectory(taskId: String): Path, createPlanDirectory(planId: String): Path",统一目录管理器,,实现,IUnifiedDirectoryManager
抽象类,智能体系统,BaseAgent,"llmService: ILlmService, manusProperties: ManusProperties, promptService: PromptService, planExecutionRecorder: PlanExecutionRecorder, currentPlanId: String, rootPlanId: String, state: AgentState, maxSteps: int, currentStep: int, envData: Map<String, Object>","getName(): String, clearUp(planId: String): void, getNextStepWithEnvMessage(): Message, getToolCallList(): List<ToolCallback>, getToolCallBackContext(toolKey: String): ToolCallBackContext, execute(): void, setState(state: AgentState): void",智能体抽象基类,模板方法模式,组合,AgentState
枚举,智能体系统,AgentState,"NOT_STARTED, IN_PROGRESS, COMPLETED, BLOCKED, FAILED",getState(): String,智能体状态枚举,,被组合,BaseAgent
类,规划系统,PlanningCoordinator,"planCreator: PlanCreator, planExecutorFactory: PlanExecutorFactory, planFinalizer: PlanFinalizer","createPlan(context: ExecutionContext): ExecutionContext, createAndExecutePlan(context: ExecutionContext): ExecutionContext, executePlan(context: ExecutionContext): ExecutionContext, finalizePlan(context: ExecutionContext): ExecutionContext",规划协调器,组合模式,组合,"PlanCreator, PlanExecutorFactory, PlanFinalizer"
类,规划系统,PlanCreator,"agents: List<DynamicAgentEntity>, llmService: ILlmService, planningTool: PlanningToolInterface, recorder: PlanExecutionRecorder, promptService: PromptService, manusProperties: ManusProperties","createPlan(context: ExecutionContext): void, buildAgentsInfo(agents: List<DynamicAgentEntity>): String, generatePlanPrompt(userRequest: String, agentsInfo: String): String",计划创建器,,被组合,PlanningCoordinator
抽象类,规划系统,AbstractPlanExecutor,"recorder: PlanExecutionRecorder, agents: List<DynamicAgentEntity>, agentService: AgentService, llmService: ILlmService, manusProperties: ManusProperties, pattern: Pattern","executeStep(step: ExecutionStep, context: ExecutionContext): BaseAgent, getStepFromStepReq(stepRequirement: String): String, parseColumns(columnsInString: String): List<String>, performCleanup(context: ExecutionContext, lastExecutor: BaseAgent): void",抽象计划执行器,模板方法模式,实现,PlanExecutorInterface
类,规划系统,PlanExecutor,,executeAllSteps(context: ExecutionContext): void,标准计划执行器,,继承,AbstractPlanExecutor
类,规划系统,MapReducePlanExecutor,executorService: ExecutorService,"executeAllSteps(context: ExecutionContext): void, executeSequentialNode(node: SequentialNode, context: ExecutionContext, lastExecutor: BaseAgent): BaseAgent, executeMapReduceNode(node: MapReduceNode, context: ExecutionContext, lastExecutor: BaseAgent): BaseAgent, executeMapPhase(steps: List<ExecutionStep>, context: ExecutionContext, toolContext: ToolCallBackContext): BaseAgent, executeReducePhase(steps: List<ExecutionStep>, context: ExecutionContext): BaseAgent, shutdown(): void",MapReduce计划执行器,,继承,AbstractPlanExecutor
类,规划系统,PlanFinalizer,"llmService: ILlmService, recorder: PlanExecutionRecorder, promptService: PromptService, manusProperties: ManusProperties",finalizePlan(context: ExecutionContext): void,计划完成器,,被组合,PlanningCoordinator
接口,业务服务层,AgentService,,"getAllAgents(): List<AgentConfig>, getAllAgentsByNamespace(namespace: String): List<AgentConfig>, getAgentById(id: String): AgentConfig, createAgent(agentConfig: AgentConfig): AgentConfig, updateAgent(agentConfig: AgentConfig): AgentConfig, deleteAgent(id: String): void, getAvailableTools(): List<Tool>, createDynamicBaseAgent(name: String, planId: String, rootPlanId: String, settings: Map<String, Object>, columns: List<String>): BaseAgent",智能体服务接口,,实现,AgentServiceImpl
类,业务服务层,AgentServiceImpl,"dynamicAgentLoader: IDynamicAgentLoader, repository: DynamicAgentRepository, planningFactory: IPlanningFactory, mcpService: IMcpService, llmService: ILlmService, toolCallingManager: ToolCallingManager","getAllAgents(): List<AgentConfig>, createAgent(agentConfig: AgentConfig): AgentConfig, createDynamicBaseAgent(name: String, planId: String, rootPlanId: String, settings: Map<String, Object>, columns: List<String>): BaseAgent",智能体服务实现,,实现,AgentService
接口,业务服务层,ModelService,,"getAllModels(): List<ModelConfig>, getModelById(id: String): ModelConfig, createModel(modelConfig: ModelConfig): ModelConfig, updateModel(modelConfig: ModelConfig): ModelConfig, deleteModel(id: String): void",模型服务接口,,实现,ModelServiceImpl
类,业务服务层,ModelServiceImpl,"repository: DynamicModelRepository, agentRepository: DynamicAgentRepository","getAllModels(): List<ModelConfig>, createModel(modelConfig: ModelConfig): ModelConfig, updateModel(modelConfig: ModelConfig): ModelConfig, deleteModel(id: String): void",模型服务实现,,实现,ModelService
类,业务服务层,LlmService,"agentExecutionClient: ChatClient, planningChatClient: ChatClient, chatModel: ChatModel","getChatClient(): ChatClient, getPlanningChatClient(): ChatClient, getChatModel(): ChatModel",LLM服务实现,,实现,ILlmService
接口,业务服务层,IUserInputService,,"storeFormInputTool(planId: String, tool: FormInputTool): void, retrieveFormInputTool(planId: String): FormInputTool, waitForUserInput(planId: String, timeout: Duration): UserInputWaitState, submitUserInput(planId: String, inputs: Map<String, String>): void",用户输入服务接口,,实现,UserInputService
类,业务服务层,UserInputService,"formInputTools: Map<String, FormInputTool>, waitStates: Map<String, UserInputWaitState>","storeFormInputTool(planId: String, tool: FormInputTool): void, waitForUserInput(planId: String, timeout: Duration): UserInputWaitState, submitUserInput(planId: String, inputs: Map<String, String>): void",用户输入服务实现,,实现,IUserInputService
类,控制器层,AgentController,agentService: AgentService,"getAllAgents(): ResponseEntity<List<AgentConfig>>, getAgentsByNamespace(namespace: String): ResponseEntity<List<AgentConfig>>, getAgentById(id: String): ResponseEntity<AgentConfig>, createAgent(agentConfig: AgentConfig): ResponseEntity<AgentConfig>, updateAgent(id: String, agentConfig: AgentConfig): ResponseEntity<AgentConfig>, deleteAgent(id: String): ResponseEntity<Void>, getAvailableTools(): ResponseEntity<List<Tool>>",智能体控制器,,聚合,AgentService
类,控制器层,ModelController,modelService: ModelService,"getAllModels(): ResponseEntity<List<ModelConfig>>, getModelById(id: String): ResponseEntity<ModelConfig>, createModel(modelConfig: ModelConfig): ResponseEntity<ModelConfig>, updateModel(id: Long, modelConfig: ModelConfig): ResponseEntity<ModelConfig>, deleteModel(id: String): ResponseEntity<Void>, getAllModelTypes(): ResponseEntity<List<String>>",模型控制器,,聚合,ModelService
类,控制器层,ManusController,"planningFactory: PlanningFactory, planIdDispatcher: PlanIdDispatcher, userInputService: UserInputService, recorder: PlanExecutionRecorder","executeTask(request: TaskExecutionRequest): ResponseEntity<ExecutionResult>, getExecutionStatus(planId: String): ResponseEntity<ExecutionStatus>, getExecutionResult(planId: String): ResponseEntity<ExecutionResult>, submitUserInput(planId: String, inputs: Map<String, String>): ResponseEntity<Void>, getUserInputWaitState(planId: String): ResponseEntity<UserInputWaitState>",主控制器,,聚合,PlanningFactory
类,控制器层,PromptController,promptService: PromptService,"getAll(): ResponseEntity<List<PromptVO>>, getAllByNamespace(namespace: String): ResponseEntity<List<PromptVO>>, getById(id: Long): ResponseEntity<PromptVO>, create(prompt: PromptVO): ResponseEntity<PromptVO>, update(id: Long, prompt: PromptVO): ResponseEntity<PromptVO>, delete(id: Long): ResponseEntity<Void>",提示词控制器,,聚合,PromptService
类,控制器层,McpController,mcpService: McpService,"getAllConfigs(): ResponseEntity<List<McpConfigVO>>, createConfig(config: McpConfigRequestVO): ResponseEntity<McpConfigVO>, updateConfig(id: Long, config: McpConfigRequestVO): ResponseEntity<McpConfigVO>, deleteConfig(id: Long): ResponseEntity<Void>, getServerStatus(id: Long): ResponseEntity<Map<String, Object>>",MCP控制器,,聚合,McpService
类,控制器层,ConfigController,configService: IConfigService,"getConfigsByGroup(groupName: String): ResponseEntity<List<ConfigEntity>>, batchUpdateConfigs(configs: List<ConfigEntity>): ResponseEntity<Void>",配置控制器,,聚合,IConfigService
类,数据层,DynamicAgentEntity,"id: Long, name: String, description: String, namespace: String, availableTools: String, nextStepPrompt: String, model: DynamicModelEntity",mapToAgentConfig(): AgentConfig,动态智能体实体,,,DynamicModelEntity
类,数据层,DynamicModelEntity,"id: Long, baseUrl: String, apiKey: String, modelName: String, modelDescription: String, type: String",mapToModelConfig(): ModelConfig,动态模型实体,,,
类,数据层,PromptEntity,"id: Long, namespace: String, promptName: String, content: String, variables: String, description: String",mapToPromptVO(): PromptVO,提示词实体,,,
类,数据层,McpConfigEntity,"id: Long, serverName: String, command: String, args: String, env: String, cwd: String, timeout: Integer, enabled: Boolean",mapToMcpConfigVO(): McpConfigVO,MCP配置实体,,,
类,数据层,ConfigEntity,"id: Long, groupName: String, configKey: String, configValue: String, description: String, inputType: ConfigInputType",,配置实体,,,
类,数据层,PlanExecutionRecordEntity,"id: Long, planId: String, rootPlanId: String, userRequest: String, planContent: String, executionStatus: String, startTime: LocalDateTime, endTime: LocalDateTime, errorMessage: String",,计划执行记录实体,,,
接口,仓库层,DynamicAgentRepository,,"findAllByNamespace(namespace: String): List<DynamicAgentEntity>, findByName(name: String): DynamicAgentEntity, findAllByModel(model: DynamicModelEntity): List<DynamicAgentEntity>",动态智能体仓库,,,
接口,仓库层,DynamicModelRepository,,findByModelName(modelName: String): DynamicModelEntity,动态模型仓库,,,
接口,仓库层,PromptRepository,,"findAllByNamespace(namespace: String): List<PromptEntity>, findByNamespaceAndPromptName(namespace: String, promptName: String): PromptEntity",提示词仓库,,,
接口,仓库层,McpConfigRepository,,"findByServerName(serverName: String): McpConfigEntity, findAllByEnabled(enabled: Boolean): List<McpConfigEntity>",MCP配置仓库,,,
接口,仓库层,ConfigRepository,,"findAllByGroupName(groupName: String): List<ConfigEntity>, findByGroupNameAndConfigKey(groupName: String, configKey: String): ConfigEntity",配置仓库,,,
接口,仓库层,PlanExecutionRecordRepository,,"findByPlanId(planId: String): PlanExecutionRecordEntity, findAllByRootPlanId(rootPlanId: String): List<PlanExecutionRecordEntity>",计划执行记录仓库,,,
类,值对象,AgentConfig,"id: String, name: String, description: String, namespace: String, availableTools: List<String>, nextStepPrompt: String, model: ModelConfig",,智能体配置值对象,,,
类,值对象,ModelConfig,"id: Long, baseUrl: String, apiKey: String, modelName: String, modelDescription: String, type: String",,模型配置值对象,,,
类,值对象,Tool,"key: String, name: String, description: String, enabled: boolean, serviceGroup: String",,工具值对象,,,
类,值对象,ExecutionContext,"currentPlanId: String, rootPlanId: String, userRequest: String, plan: PlanInterface, useMemory: boolean, success: boolean, executionParams: Map<String, Object>",,执行上下文,,,
类,值对象,ExecutionStep,"stepIndex: int, stepRequirement: String, terminateColumns: String, agent: BaseAgent",,执行步骤,,,
类,工厂模式,PlanningFactory,"dynamicAgentLoader: IDynamicAgentLoader, llmService: ILlmService, recorder: PlanExecutionRecorder, promptService: PromptService, manusProperties: ManusProperties, planExecutorFactory: PlanExecutorFactory",createPlanningCoordinator(planId: String): PlanningCoordinator,规划工厂,工厂模式,聚合,PlanExecutorFactory
类,工厂模式,PlanExecutorFactory,"agents: List<DynamicAgentEntity>, recorder: PlanExecutionRecorder, agentService: AgentService, llmService: ILlmService, manusProperties: ManusProperties",createExecutor(planType: String): PlanExecutorInterface,计划执行器工厂,工厂模式,被聚合,PlanningFactory