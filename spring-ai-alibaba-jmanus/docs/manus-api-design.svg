<svg width="1800" height="1400" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <style>
      .main-title { font-family: Arial, sans-serif; font-size: 20px; font-weight: bold; fill: #2c3e50; text-anchor: middle; }
      .module-title { font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; fill: #ffffff; text-anchor: middle; }
      .api-title { font-family: Arial, sans-serif; font-size: 11px; font-weight: bold; fill: #2c3e50; text-anchor: middle; }
      .method-text { font-family: Arial, sans-serif; font-size: 9px; fill: #ffffff; font-weight: bold; text-anchor: middle; }
      .endpoint-text { font-family: Arial, sans-serif; font-size: 9px; fill: #2c3e50; }
      .description-text { font-family: Arial, sans-serif; font-size: 8px; fill: #7f8c8d; }
      .stats-text { font-family: Arial, sans-serif; font-size: 10px; fill: #2c3e50; }
      .note-text { font-family: Arial, sans-serif; font-size: 9px; fill: #34495e; }
      
      .connection-line { stroke: #bdc3c7; stroke-width: 1; fill: none; }
      .flow-line { stroke: #3498db; stroke-width: 1.5; fill: none; marker-end: url(#flow-arrow); }
    </style>
    
    <!-- Arrow marker -->
    <marker id="flow-arrow" markerWidth="8" markerHeight="6" refX="8" refY="3" orient="auto">
      <polygon points="0 0, 8 3, 0 6" fill="#3498db"/>
    </marker>
    
    <!-- HTTP Method colors -->
    <linearGradient id="getGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#27ae60;stop-opacity:0.9" />
      <stop offset="100%" style="stop-color:#229954;stop-opacity:0.9" />
    </linearGradient>
    
    <linearGradient id="postGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#3498db;stop-opacity:0.9" />
      <stop offset="100%" style="stop-color:#2980b9;stop-opacity:0.9" />
    </linearGradient>
    
    <linearGradient id="putGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#f39c12;stop-opacity:0.9" />
      <stop offset="100%" style="stop-color:#e67e22;stop-opacity:0.9" />
    </linearGradient>
    
    <linearGradient id="deleteGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#e74c3c;stop-opacity:0.9" />
      <stop offset="100%" style="stop-color:#c0392b;stop-opacity:0.9" />
    </linearGradient>
    
    <!-- Module gradients -->
    <linearGradient id="agentGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#9b59b6;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#8e44ad;stop-opacity:0.8" />
    </linearGradient>
    
    <linearGradient id="mcpGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#e67e22;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#d35400;stop-opacity:0.8" />
    </linearGradient>
    
    <linearGradient id="modelGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#16a085;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#138d75;stop-opacity:0.8" />
    </linearGradient>
    
    <linearGradient id="promptGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#2980b9;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#1f4e79;stop-opacity:0.8" />
    </linearGradient>
    
    <linearGradient id="planGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#27ae60;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#1e8449;stop-opacity:0.8" />
    </linearGradient>
    
    <linearGradient id="executorGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#8e44ad;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#7d3c98;stop-opacity:0.8" />
    </linearGradient>
    
    <linearGradient id="configGrad" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#34495e;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#2c3e50;stop-opacity:0.8" />
    </linearGradient>
  </defs>
  
  <!-- Background -->
  <rect width="1800" height="1400" fill="#f8f9fa"/>
  
  <!-- Title -->
  <text x="900" y="30" class="main-title">JManus AI 智能助手平台 - REST API 设计架构</text>
  <text x="900" y="50" class="note-text" text-anchor="middle">RESTful API | 7个核心模块 | 40+接口端点 | JSON数据格式 | CORS跨域支持</text>
  
  <!-- API Base Info -->
  <g id="base-info">
    <rect x="50" y="80" width="1700" height="60" fill="#ecf0f1" stroke="#bdc3c7" stroke-width="2" rx="8"/>
    <text x="900" y="105" class="api-title" style="font-size: 14px;">基础信息</text>
    <text x="70" y="125" class="stats-text">🌐 基础URL: http://localhost:18080 | 📋 API版本: v1 | 📊 数据格式: JSON | 🔗 跨域支持: CORS</text>
  </g>
  
  <!-- Agent Management Module -->
  <g id="agent-module">
    <rect x="50" y="160" width="400" height="300" fill="url(#agentGrad)" stroke="#8e44ad" stroke-width="2" rx="10"/>
    <text x="250" y="185" class="module-title">智能体管理 API</text>
    
    <!-- GET Methods -->
    <rect x="70" y="200" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="95" y="213" class="method-text">GET</text>
    <text x="130" y="213" class="endpoint-text">/api/agents</text>
    <text x="280" y="213" class="description-text">获取所有智能体</text>
    
    <rect x="70" y="225" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="95" y="238" class="method-text">GET</text>
    <text x="130" y="238" class="endpoint-text">/api/agents/namespace/{ns}</text>
    <text x="320" y="238" class="description-text">按命名空间获取</text>
    
    <rect x="70" y="250" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="95" y="263" class="method-text">GET</text>
    <text x="130" y="263" class="endpoint-text">/api/agents/{id}</text>
    <text x="280" y="263" class="description-text">获取智能体详情</text>
    
    <rect x="70" y="275" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="95" y="288" class="method-text">GET</text>
    <text x="130" y="288" class="endpoint-text">/api/agents/tools</text>
    <text x="280" y="288" class="description-text">获取可用工具列表</text>
    
    <!-- POST Methods -->
    <rect x="70" y="305" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="95" y="318" class="method-text">POST</text>
    <text x="130" y="318" class="endpoint-text">/api/agents</text>
    <text x="280" y="318" class="description-text">创建智能体</text>
    
    <!-- PUT Methods -->
    <rect x="70" y="330" width="50" height="20" fill="url(#putGrad)" rx="3"/>
    <text x="95" y="343" class="method-text">PUT</text>
    <text x="130" y="343" class="endpoint-text">/api/agents/{id}</text>
    <text x="280" y="343" class="description-text">更新智能体</text>
    
    <!-- DELETE Methods -->
    <rect x="70" y="355" width="50" height="20" fill="url(#deleteGrad)" rx="3"/>
    <text x="95" y="368" class="method-text">DELETE</text>
    <text x="130" y="368" class="endpoint-text">/api/agents/{id}</text>
    <text x="280" y="368" class="description-text">删除智能体</text>
    
    <!-- Data Models -->
    <rect x="70" y="390" width="360" height="55" fill="#ffffff" stroke="#9b59b6" stroke-width="1" rx="5"/>
    <text x="250" y="408" class="api-title">AgentConfig 数据模型</text>
    <text x="75" y="423" class="description-text">id, name, description, nextStepPrompt, availableTools[]</text>
    <text x="75" y="435" class="description-text">model: {id, modelName, provider}, namespace</text>
  </g>
  
  <!-- MCP Configuration Module -->
  <g id="mcp-module">
    <rect x="470" y="160" width="400" height="300" fill="url(#mcpGrad)" stroke="#e67e22" stroke-width="2" rx="10"/>
    <text x="670" y="185" class="module-title">MCP配置管理 API</text>
    
    <rect x="490" y="200" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="515" y="213" class="method-text">GET</text>
    <text x="550" y="213" class="endpoint-text">/api/mcp/list</text>
    <text x="700" y="213" class="description-text">获取所有MCP服务器配置</text>
    
    <rect x="490" y="225" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="515" y="238" class="method-text">POST</text>
    <text x="550" y="238" class="endpoint-text">/api/mcp/add</text>
    <text x="700" y="238" class="description-text">添加MCP服务器配置</text>
    
    <!-- Connection Types -->
    <rect x="490" y="260" width="360" height="80" fill="#ffffff" stroke="#e67e22" stroke-width="1" rx="5"/>
    <text x="670" y="278" class="api-title">连接类型支持</text>
    <text x="495" y="293" class="description-text">🔗 SSE: Server-Sent Events 实时数据流</text>
    <text x="495" y="305" class="description-text">💻 STUDIO: 本地STDIO连接</text>
    <text x="495" y="317" class="description-text">📡 STREAMING: 流式长连接</text>
    <text x="495" y="329" class="description-text">⚙️ 支持动态配置和热插拔</text>
    
    <!-- Data Models -->
    <rect x="490" y="350" width="360" height="95" fill="#ffffff" stroke="#e67e22" stroke-width="1" rx="5"/>
    <text x="670" y="368" class="api-title">McpConfigVO 数据模型</text>
    <text x="495" y="383" class="description-text">id, mcpServerName, connectionType</text>
    <text x="495" y="395" class="description-text">configJson, isActive, createdAt</text>
    <text x="495" y="407" class="description-text">配置示例: {"command": "node", "args": [...]}</text>
    <text x="495" y="419" class="description-text">支持环境变量和认证配置</text>
    <text x="495" y="431" class="description-text">自动健康检查和状态监控</text>
  </g>
  
  <!-- AI Model Management Module -->
  <g id="model-module">
    <rect x="890" y="160" width="400" height="300" fill="url(#modelGrad)" stroke="#16a085" stroke-width="2" rx="10"/>
    <text x="1090" y="185" class="module-title">AI模型管理 API</text>
    
    <rect x="910" y="200" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="935" y="213" class="method-text">GET</text>
    <text x="970" y="213" class="endpoint-text">/api/models</text>
    <text x="1120" y="213" class="description-text">获取所有AI模型</text>
    
    <rect x="910" y="225" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="935" y="238" class="method-text">GET</text>
    <text x="970" y="238" class="endpoint-text">/api/models/{id}</text>
    <text x="1120" y="238" class="description-text">获取模型详情</text>
    
    <rect x="910" y="250" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="935" y="263" class="method-text">GET</text>
    <text x="970" y="263" class="endpoint-text">/api/models/types</text>
    <text x="1120" y="263" class="description-text">获取所有模型类型</text>
    
    <rect x="910" y="275" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="935" y="288" class="method-text">POST</text>
    <text x="970" y="288" class="endpoint-text">/api/models</text>
    <text x="1120" y="288" class="description-text">创建模型配置</text>
    
    <rect x="910" y="300" width="50" height="20" fill="url(#putGrad)" rx="3"/>
    <text x="935" y="313" class="method-text">PUT</text>
    <text x="970" y="313" class="endpoint-text">/api/models/{id}</text>
    <text x="1120" y="313" class="description-text">更新模型配置</text>
    
    <rect x="910" y="325" width="50" height="20" fill="url(#deleteGrad)" rx="3"/>
    <text x="935" y="338" class="method-text">DELETE</text>
    <text x="970" y="338" class="endpoint-text">/api/models/{id}</text>
    <text x="1120" y="338" class="description-text">删除模型配置</text>
    
    <!-- Model Types -->
    <rect x="910" y="360" width="360" height="85" fill="#ffffff" stroke="#16a085" stroke-width="1" rx="5"/>
    <text x="1090" y="378" class="api-title">支持的模型类型</text>
    <text x="915" y="393" class="description-text">🤖 CHAT: 对话模型 (qwen-max, gpt-4, claude-3)</text>
    <text x="915" y="405" class="description-text">🔍 EMBEDDING: 向量模型 (text-embedding-ada-002)</text>
    <text x="915" y="417" class="description-text">🖼️ IMAGE: 图像生成模型 (dall-e-3, midjourney)</text>
    <text x="915" y="429" class="description-text">🎵 AUDIO: 音频处理模型 (whisper, tts)</text>
    <text x="915" y="441" class="description-text">⚙️ 支持多厂商API和自定义参数配置</text>
  </g>
  
  <!-- Prompt Management Module -->
  <g id="prompt-module">
    <rect x="1310" y="160" width="440" height="300" fill="url(#promptGrad)" stroke="#2980b9" stroke-width="2" rx="10"/>
    <text x="1530" y="185" class="module-title">提示词管理 API</text>
    
    <rect x="1330" y="200" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="1355" y="213" class="method-text">GET</text>
    <text x="1390" y="213" class="endpoint-text">/api/prompt</text>
    <text x="1540" y="213" class="description-text">获取所有提示词</text>
    
    <rect x="1330" y="225" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="1355" y="238" class="method-text">GET</text>
    <text x="1390" y="238" class="endpoint-text">/api/prompt/namespace/{ns}</text>
    <text x="1580" y="238" class="description-text">按命名空间获取</text>
    
    <rect x="1330" y="250" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="1355" y="263" class="method-text">GET</text>
    <text x="1390" y="263" class="endpoint-text">/api/prompt/{id}</text>
    <text x="1540" y="263" class="description-text">获取提示词详情</text>
    
    <rect x="1330" y="275" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="1355" y="288" class="method-text">POST</text>
    <text x="1390" y="288" class="endpoint-text">/api/prompt</text>
    <text x="1540" y="288" class="description-text">创建提示词</text>
    
    <rect x="1330" y="300" width="50" height="20" fill="url(#putGrad)" rx="3"/>
    <text x="1355" y="313" class="method-text">PUT</text>
    <text x="1390" y="313" class="endpoint-text">/api/prompt/{id}</text>
    <text x="1540" y="313" class="description-text">更新提示词</text>
    
    <rect x="1330" y="325" width="50" height="20" fill="url(#deleteGrad)" rx="3"/>
    <text x="1355" y="338" class="method-text">DELETE</text>
    <text x="1390" y="338" class="endpoint-text">/api/prompt/{id}</text>
    <text x="1540" y="338" class="description-text">删除提示词</text>
    
    <!-- Prompt Features -->
    <rect x="1330" y="360" width="400" height="85" fill="#ffffff" stroke="#2980b9" stroke-width="1" rx="5"/>
    <text x="1530" y="378" class="api-title">提示词特性</text>
    <text x="1335" y="393" class="description-text">📝 支持变量模板和参数替换</text>
    <text x="1335" y="405" class="description-text">🏷️ 多命名空间隔离管理</text>
    <text x="1335" y="417" class="description-text">🔄 版本控制和变更历史</text>
    <text x="1335" y="429" class="description-text">🎯 支持不同消息类型 (USER, SYSTEM, ASSISTANT)</text>
    <text x="1335" y="441" class="description-text">⚡ 内置提示词库和自定义扩展</text>
  </g>
  
  <!-- Plan Template Management Module -->
  <g id="plan-module">
    <rect x="50" y="480" width="400" height="200" fill="url(#planGrad)" stroke="#27ae60" stroke-width="2" rx="10"/>
    <text x="250" y="505" class="module-title">计划模板管理 API</text>
    
    <rect x="70" y="520" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="95" y="533" class="method-text">POST</text>
    <text x="130" y="533" class="endpoint-text">/api/plan-template/save</text>
    <text x="300" y="533" class="description-text">保存计划模板</text>
    
    <rect x="70" y="545" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="95" y="558" class="method-text">POST</text>
    <text x="130" y="558" class="endpoint-text">/api/plan-template/versions</text>
    <text x="320" y="558" class="description-text">获取计划版本历史</text>
    
    <rect x="70" y="570" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="95" y="583" class="method-text">POST</text>
    <text x="130" y="583" class="endpoint-text">/api/plan-template/get-version</text>
    <text x="340" y="583" class="description-text">获取特定版本计划</text>
    
    <!-- Plan Features -->
    <rect x="70" y="600" width="360" height="65" fill="#ffffff" stroke="#27ae60" stroke-width="1" rx="5"/>
    <text x="250" y="618" class="api-title">计划模板特性</text>
    <text x="75" y="633" class="description-text">📋 JSON格式存储和查询</text>
    <text x="75" y="645" class="description-text">🔄 完整的版本控制机制</text>
    <text x="75" y="657" class="description-text">⚡ 支持计划复制和模板化</text>
  </g>
  
  <!-- Plan Execution Module -->
  <g id="executor-module">
    <rect x="470" y="480" width="400" height="200" fill="url(#executorGrad)" stroke="#8e44ad" stroke-width="2" rx="10"/>
    <text x="670" y="505" class="module-title">计划执行 API</text>
    
    <rect x="490" y="520" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="515" y="533" class="method-text">POST</text>
    <text x="550" y="533" class="endpoint-text">/api/executor/execute</text>
    <text x="700" y="533" class="description-text">执行计划</text>
    
    <rect x="490" y="545" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="515" y="558" class="method-text">GET</text>
    <text x="550" y="558" class="endpoint-text">/api/executor/details/{planId}</text>
    <text x="740" y="558" class="description-text">获取执行详情</text>
    
    <rect x="490" y="570" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="515" y="583" class="method-text">POST</text>
    <text x="550" y="583" class="endpoint-text">/api/executor/stop</text>
    <text x="700" y="583" class="description-text">停止执行</text>
    
    <rect x="490" y="595" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="515" y="608" class="method-text">GET</text>
    <text x="550" y="608" class="endpoint-text">/api/executor/status/{planId}</text>
    <text x="740" y="608" class="description-text">查询执行状态</text>
    
    <!-- Execution Features -->
    <rect x="490" y="630" width="360" height="35" fill="#ffffff" stroke="#8e44ad" stroke-width="1" rx="5"/>
    <text x="670" y="648" class="api-title">执行特性</text>
    <text x="495" y="658" class="description-text">🚀 SIMPLE/MAPREDUCE 两种执行模式 | ⏱️ 异步执行和状态查询</text>
  </g>
  
  <!-- System Configuration Module -->
  <g id="config-module">
    <rect x="890" y="480" width="400" height="200" fill="url(#configGrad)" stroke="#34495e" stroke-width="2" rx="10"/>
    <text x="1090" y="505" class="module-title">系统配置管理 API</text>
    
    <rect x="910" y="520" width="50" height="20" fill="url(#getGrad)" rx="3"/>
    <text x="935" y="533" class="method-text">GET</text>
    <text x="970" y="533" class="endpoint-text">/api/config/group/{group}</text>
    <text x="1150" y="533" class="description-text">按组获取配置</text>
    
    <rect x="910" y="545" width="50" height="20" fill="url(#postGrad)" rx="3"/>
    <text x="935" y="558" class="method-text">POST</text>
    <text x="970" y="558" class="endpoint-text">/api/config/batch-update</text>
    <text x="1150" y="558" class="description-text">批量更新配置</text>
    
    <!-- Config Features -->
    <rect x="910" y="580" width="360" height="85" fill="#ffffff" stroke="#34495e" stroke-width="1" rx="5"/>
    <text x="1090" y="598" class="api-title">配置管理特性</text>
    <text x="915" y="613" class="description-text">⚙️ 分组管理: llm, system, security等</text>
    <text x="915" y="625" class="description-text">🔄 动态更新: 无需重启即可生效</text>
    <text x="915" y="637" class="description-text">📊 类型支持: STRING, INTEGER, FLOAT, BOOLEAN</text>
    <text x="915" y="649" class="description-text">🛡️ 验证机制: 自动校验配置有效性</text>
    <text x="915" y="661" class="description-text">📝 变更记录: 完整的配置变更历史</text>
  </g>
  
  <!-- API Flow Diagram -->
  <g id="api-flow">
    <rect x="1310" y="480" width="440" height="200" fill="#f8f9fa" stroke="#95a5a6" stroke-width="2" rx="10"/>
    <text x="1530" y="505" class="module-title" style="fill: #2c3e50;">典型